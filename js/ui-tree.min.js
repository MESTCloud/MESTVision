var TreeData;
var UITree = function() {
	
	var handleSample2 = function() {
		var treeObj = {};
		
		$('#tree_2').jstree({

			'plugins': ["checkbox", "types"],
			'core': {
				"themes": {
					"responsive": false
				},
				'data': [{
						"text": "Same but with checkboxes",
						"children": [{
							"text": "initially selected1",
							"state": {
								"selected": true
							}
						}, {
							"text": "custom icon",
							"icon": "fa fa-folder icon-state-warning"
						}, {
							"text": "initially open1",
							"icon": "fa fa-folder icon-state-warning",
							"state": {
								"opened": true
							},
							"children": ["Another node"]
						}, {
							"text": "custom icon",
							"icon": "fa fa-folder icon-state-warning"
						}, {
							"text": "disabled node",
							"icon": "fa fa-folder icon-state-warning",
							/* "state": {
							     "opened": true
							 }*/
						}]
					},
					"And wholerow selection"
				]
			},
			"types": {
				"default": {
					"icon": "fa fa-folder icon-state-warning icon-lg"
				},
				"file": {
					"icon": "fa fa-file icon-state-warning icon-lg"
				}
			}
		});
		$("#tree_2").bind("activate_node.jstree", function(obj, e) {
			var currentNode = e.node;
			treeObj = currentNode;

		});
		$('#tree_2').on("click.jstree", function(e) {
			console.log(treeObj);
			console.log(treeObj.id);
		});
	}
	var contextualMenuSample = function() {
		var currentNode = "";
		console.log(TreeData);
		$("#tree_3").jstree({
     
			"core": {
				"themes": {
					"responsive": false
				},
				// so that create works
				"check_callback": true,
				'data': TreeData
			},
			"types": {
				"default": {
					"icon": "fa fa-folder icon-state-warning icon-lg"
				},
				"file": {
					"icon": "fa fa-file icon-state-warning icon-lg"
				}
			},
			"state": {
				"key": "demo2"
			},

			"plugins": ["contextmenu", "state", "types"]
		});
		$("#tree_3").bind("activate_node.jstree", function(obj, e) {
			currentNode = e.node;

		});
	
	

	}

	function bindTable(datatable) {
		if(datatable.length > 0) {
			var str = "";
			$.each(datatable, function(index, data) {

				if(parseInt(index) / 2 == 0) {
					str += "<tr class='gradeX odd' role='row'>"
				} else {
					str += "<tr class='gradeX even' role='row'>"
				}
				str += " <td><label class='mt-checkbox mt-checkbox-single mt-checkbox-outline'>";
				str += "<input type='checkbox' class='checkboxes' value='" + data["id"] + "' name='check_table'>";
				str += "<span></span>";
				str += "</label> </td>";
				str += "<td class='sorting_1'>" + data["loginName"] + "</td>";
				str += "<td>" + data["name"] + "</td>";
				str += "<td>" + data["number"] + "</td>";
				str += "<td>" + data["role"] + "</td>";
				str += "<td>" + data["you"] + "</td>";
				str += "</tr>";

			});

		}

		return str;
	}

	function info(str) {
		$(".context_reminder").html(str);
	}
	$(".cancel").click(function() {
		$(".reminder").hide();
	});
	/*判定不能为空*/
	function Mark() {

		if($("#input_treeName").val().trim() == "") {
			UITree.info("姓名不能为空");
			$(".reminder").show();
			$("#input_treeName").focus();
			return false;
		}

		if($("#input_treeAddress").val().trim() == "") {
			info("网址不能为空！");
			$(".reminder").show();
			$("#input_treeAddress").focus();
			return false;
		}

		return true;

	}

	/*角色菜单管理*/

	var RoleMenu = function() {
		var treeObj = {};
		$('#tree_role').jstree({
			'plugins': ["checkbox", "types"],
			'core': {
				"themes": {
					"responsive": false
				},
				'data': [{
						"text": "能源管理系统",
						"children": [{
							"text": "系统管理",
							"state": {
								"selected": true
							}
						}, {
							"text": "气体站",
							"icon": "fa fa-folder icon-state-warning"
						}, {
							"text": "水泥厂",
							"icon": "fa fa-folder icon-state-warning",
							"state": {
								"opened": true
							},
							"children": ["DCS画面"]
						}, {
							"text": "智能楼宇",
							"icon": "fa fa-folder icon-state-warning"
						}, {
							"text": "item 1",
							"icon": "fa fa-folder icon-state-warning",
							/* "state": {
							     "opened": true
							 }*/
						}]
					},
					/*"And wholerow selection"*/
				]
			},
			"types": {
				"default": {
					"icon": "fa fa-folder icon-state-warning icon-lg"
				},
				"file": {
					"icon": "fa fa-file icon-state-warning icon-lg"
				}
			}
		});
		$("#tree_role").bind("activate_node.jstree", function(obj, e) {
			var currentNode = e.node;
			treeObj = currentNode;

		});
		

	}

	//连接成功
	socket.onopen = function() {
		
		if($.cookie("user") && $.cookie("password")) {
			socket.send("Login {\"username\":\"" + $.cookie("user") + "\",\"password\":\"" + $.cookie("password") + "\"}");
		}

		socket.send("ModuleListByTree");

	}

	

	return {
		//main function to initiate the module
		init: function() {

			handleSample2();
			contextualMenuSample();
			RoleMenu();
		}

	};

}();
var ChirdID;
if(App.isAngularJsApp() === false) {
	jQuery(document).ready(function() {
		
		//收到消息
	socket.onmessage = function(msg) {
		var result = msg.data;
	
		result = JSON.parse(result);
		
		if(result["error"]) {
			shalert(result["error"]);
		} else if(result["exception"]) {
			shalert(result["exception"]);
		} else {
			switch(result["Function"]) {
				case "ModuleListByTree":

					TreeData = result["data"]
					console.log(TreeData);
					UITree.init();
					break;
                case "AddModule":
                shalert("添加成功");
                 
                	$('#my_Modal_tree_Add').modal('hide');    	
                break;
                case "UpdateModule":
                shalert("修改成功");
                 
                	$('#my_Modal_tree_Update').modal('hide');
                	
                	break;
                case "DeleteModule":
              
                shalert("删除成功");
                break;
                
                
			}

		}
	}
		
	});
}

	//连接断开
	socket.onclose = function(event) {
		//console.log("Socket状态:" + readyStatus[socket.readyState]);
		//location.href = "http://www.baidu.com";
		location.href = "../Login.html";
	}

	//发送
	function send(msg) {
		socket.send(msg);
	}

	//断开连接
	function disconnect() {
		socket.close();
	}